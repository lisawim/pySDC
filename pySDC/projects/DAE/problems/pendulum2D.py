import numpy as np

from pySDC.core.errors import ProblemError
from pySDC.core.problem import WorkCounter
from pySDC.projects.DAE.misc.problemDAE import ProblemDAE


class Pendulum2D(ProblemDAE):
    r"""
    Example implementing the well known 2D pendulum as a first order differential-algebraic equation (DAE) of index 3.
    The DAE system is given by the equations

    .. math::
        \frac{dp}{dt} = u,

    .. math::
        \frac{dq}{dt} = v,

    .. math::
        m\frac{du}{dt} = -p \lambda,

    .. math::
        m\frac{dv}{dt} = -q \lambda - g,

    .. math::
        0 = p^2 + q^2 - l^2

    for :math:`l=1` and :math:`m=1`. The pendulum is used in most introductory literature on DAEs, for example on page 8
    of [1]_.

    Parameters
    ----------
    nvars : int
        Number of unknowns of the system of DAEs.
    newton_tol : float
        Tolerance for Newton solver.

    Attributes
    ----------
    t_end: float
        The end time at which the reference solution is determined.

    References
    ----------
    .. [1] E. Hairer, C. Lubich, M. Roche. The numerical solution of differential-algebraic systems by Runge-Kutta methods.
        Lect. Notes Math. (1989).
    """

    def __init__(self, newton_tol):
        """Initialization routine"""
        super().__init__(nvars=5, newton_tol=newton_tol)
        # load reference solution
        # data file must be generated and stored under misc/data and self.t_end = t[-1]
        # data = np.load(r'pySDC/projects/DAE/misc/data/pendulum.npy')
        # t = data[:, 0]
        # solution = data[:, 1:]
        # self.u_ref = interp1d(t, solution, kind='cubic', axis=0, fill_value='extrapolate')
        self.t_end = 0.0

    def eval_f(self, u, du, t):
        r"""
        Routine to evaluate the implicit representation of the problem, i.e., :math:`F(u, u', t)`.

        Parameters
        ----------
        u : dtype_u
            Current values of the numerical solution at time t.
        du : dtype_u
            Current values of the derivative of the numerical solution at time t.
        t : float
            Current time of the numerical solution.

        Returns
        -------
        f : dtype_f
            Current value of the right-hand side of f (which includes five components).
        """
        g = 9.8
        # The last element of u is a Lagrange multiplier. Not sure if this needs to be time dependent, but must model the
        # weight somehow
        f = self.dtype_f(self.init)
        f.diff[:4] = (
            du.diff[0] - u.diff[2],
            du.diff[1] - u.diff[3],
            du.diff[2] + u.alg[0] * u.diff[0],
            du.diff[3] + u.alg[0] * u.diff[1] + g,
        )
        f.alg[0] = u.diff[0] ** 2 + u.diff[1] ** 2 - 1
        self.work_counters['rhs']()
        return f

    def u_exact(self, t):
        """
        Approximation of the exact solution generated by spline interpolation of an extremely accurate numerical reference solution.

        Parameters
        ----------
        t : float
            The time of the reference solution.

        Returns
        -------
        me : dtype_u
            The reference solution as mesh object. It contains fixed initial conditions at initial time.
        """
        me = self.dtype_u(self.init)
        if t == 0:
            me.diff[:4] = (-1, 0, 0, 0)
            me.alg[0] = 0
        elif t < self.t_end:
            u_ref = self.u_ref(t)
            me.diff[:4] = u_ref[:4]
            me.alg[0] = u_ref[5]
        else:
            self.logger.warning("Requested time exceeds domain of the reference solution. Returning zero.")
            me.diff[:4] = (0, 0, 0, 0)
            me.alg[0] = 0
        return me


class Pendulum2DIntegralFormulation(Pendulum2D):
    def __init__(self, nvars=5, newton_tol=1e-12, newton_maxiter=100, stop_at_maxiter=False, stop_at_nan=True):
        """Initialization routine"""
        super().__init__()
        self._makeAttributeAndRegister('newton_tol', 'newton_maxiter', 'stop_at_maxiter', 'stop_at_nan', localVars=locals())
        self.work_counters['newton'] = WorkCounter()
        self.work_counters['rhs'] = WorkCounter()

    def eval_f(self, u, t):
        r"""
        Routine to evaluate the implicit representation of the problem, i.e., :math:`F(u, u', t)`.

        Parameters
        ----------
        u : dtype_u
            Current values of the numerical solution at time t.
        t : float
            Current time of the numerical solution.

        Returns
        -------
        f : dtype_f
            The right-hand side of f (contains two components).
        """

        q1, q2, v1, v2 = u.diff[0], u.diff[1], u.diff[2], u.diff[3]
        lamb = u.alg[0]

        f = self.dtype_f(self.init)
        f.diff[0] = v1
        f.diff[1] = v2
        f.diff[2] = -lamb * q1
        f.diff[3] = -lamb * q2 - self.g
        f.alg[0] = q1 ** 2 + q2 ** 2 - 1
        return f

    def solve_system(self, rhs, factor, u0, t):
        """
        Simple Newton solver.

        Parameters
        ----------
        rhs : dtype_f
            Right-hand side for the nonlinear system.
        factor : float
            Abbrev. for the node-to-node stepsize (or any other factor required).
        u0 : dtype_u
            Initial guess for the iterative solver.
        t : float
            Current time (required here for the BC).

        Returns
        -------
        me : dtype_u
            The solution as mesh.
        """

        u = self.dtype_u(u0)

        # start newton iteration
        n = 0
        res = 99
        while n < self.newton_maxiter:
            q1, q2, v1, v2 = u.diff[0], u.diff[1], u.diff[2], u.diff[3]
            lamb = u.alg[0]
            f = self.eval_f(u, t)

            # form the function g(u), such that the solution to the nonlinear problem is a root of g
            g = np.array(
                [
                    q1 - factor * f.diff[0] - rhs.diff[0],
                    q2 - factor * f.diff[1] - rhs.diff[1],
                    v1 - factor * f.diff[2] - rhs.diff[2],
                    v2 - factor * f.diff[3] - rhs.diff[3],
                    f.alg[0],
                ]
            )

            # if g is close to 0, then we are done
            res = np.linalg.norm(g, np.inf)
            if res < self.newton_tol:
                break

            # assemble dg
            dg = np.array(
                [
                    [1, 0, -factor, 0, 0],
                    [0, 1, 0, -factor, 0],
                    [lamb * factor, 0, 1, 0, q1 * factor],
                    [0, lamb * factor, 0, 1, q2 * factor],
                    [2 * q1, 2 * q2, 0, 0, 0],
                ]
            )

            # newton update: u1 = u0 - g/dg
            dx = np.linalg.solve(dg, g)

            u.diff[0] -= dx[0]
            u.diff[1] -= dx[1]
            u.diff[2] -= dx[2]
            u.diff[3] -= dx[3]
            u.alg[0] -= dx[4]

            n += 1
            self.work_counters['newton']()

        if np.isnan(res) and self.stop_at_nan:
            raise ProblemError('Newton got nan after %i iterations, aborting...' % n)
        elif np.isnan(res):
            self.logger.warning('Newton got nan after %i iterations...' % n)

        if n == self.newton_maxiter:
            msg = 'Newton did not converge after %i iterations, error is %s' % (n, res)
            if self.stop_at_maxiter:
                raise ProblemError(msg)
            else:
                self.logger.warning(msg)

        me = self.dtype_u(self.init)
        me[:] = u[:]

        return me


class Pendulum2DIntegralFormulation2(Pendulum2DIntegralFormulation):

    def solve_system(self, rhs, factor, u0, t):
        """
        Simple Newton solver.

        Parameters
        ----------
        rhs : dtype_f
            Right-hand side for the nonlinear system.
        factor : float
            Abbrev. for the node-to-node stepsize (or any other factor required).
        u0 : dtype_u
            Initial guess for the iterative solver.
        t : float
            Current time (required here for the BC).

        Returns
        -------
        me : dtype_u
            The solution as mesh.
        """

        u = self.dtype_u(u0)

        # start newton iteration
        n = 0
        res = 99
        while n < self.newton_maxiter:
            q1, q2, v1, v2 = u.diff[0], u.diff[1], u.diff[2], u.diff[3]
            lamb = u.alg[0]
            f = self.eval_f(u, t)

            # form the function g(u), such that the solution to the nonlinear problem is a root of g
            g = np.array(
                [
                    q1 - factor * f.diff[0] - rhs.diff[0],
                    q2 - factor * f.diff[1] - rhs.diff[1],
                    v1 - factor * f.diff[2] - rhs.diff[2],
                    v2 - factor * f.diff[3] - rhs.diff[3],
                    -factor * (f.alg[0]) - rhs.alg[0],
                ]
            )

            # if g is close to 0, then we are done
            res = np.linalg.norm(g, np.inf)
            if res < self.newton_tol:
                break

            # assemble dg
            dg = np.array(
                [
                    [1, 0, -factor, 0, 0],
                    [0, 1, 0, -factor, 0],
                    [lamb * factor, 0, 1, 0, q1 * factor],
                    [0, lamb * factor, 0, 1, q2 * factor],
                    [-2 * factor * q1, -2 * factor * q2, 0, 0, 0],
                ]
            )

            # newton update: u1 = u0 - g/dg
            dx = np.linalg.solve(dg, g)

            u.diff[0] -= dx[0]
            u.diff[1] -= dx[1]
            u.diff[2] -= dx[2]
            u.diff[3] -= dx[3]
            u.alg[0] -= dx[4]

            n += 1
            self.work_counters['newton']()

        if np.isnan(res) and self.stop_at_nan:
            raise ProblemError('Newton got nan after %i iterations, aborting...' % n)
        elif np.isnan(res):
            self.logger.warning('Newton got nan after %i iterations...' % n)

        if n == self.newton_maxiter:
            msg = 'Newton did not converge after %i iterations, error is %s' % (n, res)
            if self.stop_at_maxiter:
                raise ProblemError(msg)
            else:
                self.logger.warning(msg)

        me = self.dtype_u(self.init)
        me[:] = u[:]

        return me
